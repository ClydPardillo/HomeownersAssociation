@model HomeownersAssociation.Models.Announcement
@using HomeownersAssociation.Models 

@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid p-0">
    <!-- Hero Section -->
    <div class="bg-dark text-white text-center d-flex align-items-center justify-content-center"
         style="min-height: 20vh; background-image: url('/images/announcement-details-hero.jpg'); background-size: cover; background-position: center;">
        <div style="background-color: rgba(0, 0, 0, 0.5); padding: 2rem; border-radius: .5rem;">
            <h1 class="display-4 fw-bold oswald-heading">@Model.Title</h1>
                        <div class="d-flex justify-content-center align-items-center mt-2">
                @if (Model.IsPublic)
                {
                    <span class="badge badge-light me-2 fs-6"><i class="fas fa-globe me-1"></i> Public</span>
                }
                else
                {
                    <span class="badge badge-dark me-2 fs-6"><i class="fas fa-lock me-1"></i> Private</span>
                }
                <span class="badge @GetPriorityBadgeClass(Model.Priority) fs-6">@Model.Priority</span>
            </div>

        </div>
    </div>
</div>

<div class="container py-5 lora-body">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <div class="card rounded-6 shadow-2-strong @GetPriorityBorderClass(Model.Priority)">
                <div class="card-header text-white @GetPriorityHeaderBackgroundClass(Model.Priority) oswald-heading">
                    <h4 class="mb-0">Announcement Details</h4>
                </div>
                <div class="card-body p-4">
                    <div class="mb-4" style="font-size: 1.1rem;">
                        @Html.Raw(Model.Content)
                    </div>

                    @if (!string.IsNullOrEmpty(Model.AttachmentUrl))
                    {
                        <hr class="my-4" />
                        <div class="p-3 bg-body-tertiary rounded-3">
                            <h5 class="oswald-heading"><i class="fas fa-paperclip me-2"></i>Attachment</h5>
                            <a href="@Model.AttachmentUrl" class="btn btn-primary" target="_blank" data-mdb-ripple-init>
                                <i class="fas fa-download me-2"></i> Download Attachment
                            </a>
                        </div>
                    }

                    <hr class="my-4" />

                    <h5 class="oswald-heading mb-3">Additional Information</h5>
                    <div class="bg-body-tertiary p-3 rounded-3">
                        <dl class="row mb-0">
                            <dt class="col-sm-4 fw-bold">Posted By:</dt>
                            <dd class="col-sm-8">@(Model.Author?.FirstName ?? "System") @(Model.Author?.LastName ?? "")</dd>

                            <dt class="col-sm-4 fw-bold">Date Posted:</dt>
                            <dd class="col-sm-8">@Model.DatePosted.ToString("MMMM dd, yyyy, hh:mm tt")</dd>
                            
                            @if (Model.DateEdited.HasValue && Model.DateEdited > Model.DatePosted)
                            {
                                <dt class="col-sm-4 fw-bold">Last Updated:</dt>
                                <dd class="col-sm-8 fst-italic">@Model.DateEdited.Value.ToString("MMMM dd, yyyy, hh:mm tt")</dd>
                            }

                            @if (Model.ExpiryDate.HasValue)
                            {
                                <dt class="col-sm-4 fw-bold">Expiry Date:</dt>
                                <dd class="col-sm-8 @(Model.ExpiryDate.Value < DateTime.Now ? "text-danger fw-bold" : "")">
                                    @Model.ExpiryDate.Value.ToString("MMMM dd, yyyy")
                                    @if (Model.ExpiryDate.Value < DateTime.Now)
                                    {
                                        <span>(Expired)</span>
                                    }
                                </dd>
                            }

                            <dt class="col-sm-4 fw-bold">Status:</dt>
                            <dd class="col-sm-8">
                                @if (Model.IsActive)
                                {
                                    <span class="badge badge-success"><i class="fas fa-check-circle me-1"></i> Active</span>
                                }
                                else
                                {
                                    <span class="badge badge-secondary"><i class="fas fa-times-circle me-1"></i> Inactive</span>
                                }
                            </dd>
                        </dl>
                    </div>
                </div>

                @if (User.IsInRole("Admin") || User.IsInRole("Staff"))
                {
                    <div class="card-footer bg-light text-end p-3">
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-secondary me-2" data-mdb-ripple-init>
                            <i class="fas fa-pencil-alt me-1"></i> Edit
                        </a>
                        <button type="button" class="btn btn-danger" data-mdb-ripple-init data-mdb-modal-init data-mdb-target="#deleteConfirmationModal">
                            <i class="fas fa-trash-alt me-1"></i> Delete
                        </button>
                    </div>
                }
            </div>

            <div class="mt-4 text-center">
                <a asp-action="Index" class="btn btn-outline-primary" data-mdb-ripple-init>
                    <i class="fas fa-arrow-left me-2"></i> Back to All Announcements
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (User.IsInRole("Admin") || User.IsInRole("Staff"))
{
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true" data-mdb-backdrop="static" data-mdb-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title oswald-heading" id="deleteModalLabel"><i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-mdb-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body lora-body">
                <p>Are you sure you want to delete the announcement titled "<strong>@Model.Title</strong>"?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-mdb-dismiss="modal" data-mdb-ripple-init>
                    Cancel
                </button>
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger" data-mdb-ripple-init>
                        <i class="fas fa-trash-alt me-1"></i> Delete Announcement
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
}

@functions {
    string GetPriorityBorderClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Urgent => "border border-4 border-danger",
            AnnouncementPriority.High => "border border-3 border-warning",
            AnnouncementPriority.Normal => "border border-2 border-primary",
            AnnouncementPriority.Low => "border border-info",
            _ => "border"
        };
    }

    string GetPriorityHeaderBackgroundClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Urgent => "bg-danger",
            AnnouncementPriority.High => "bg-warning text-dark",
            AnnouncementPriority.Normal => "bg-primary",
            AnnouncementPriority.Low => "bg-info text-dark",
            _ => "bg-dark"
        };
    }

    string GetPriorityBadgeClass(AnnouncementPriority priority)
    {
        return priority switch
        {
            AnnouncementPriority.Urgent => "badge-danger",
            AnnouncementPriority.High => "badge-warning text-dark",
            AnnouncementPriority.Normal => "badge-primary",
            AnnouncementPriority.Low => "badge-info text-dark",
            _ => "badge-secondary"
        };
    }
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize MDB Modals if any exist on the page
            document.querySelectorAll('.modal').forEach((modal) => {
                new mdb.Modal(modal);
            });
        });
    </script>
}