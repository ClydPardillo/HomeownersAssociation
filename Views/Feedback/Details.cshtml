@model HomeownersAssociation.Models.Feedback

@{
    ViewData["Title"] = "Feedback Details";
}

<div class="container-fluid pt-4 px-4">
    <div class="bg-light rounded p-4">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h5 class="mb-0">Feedback Details</h5>
            <div>
                @if (User.IsInRole("Admin") || User.IsInRole("Staff"))
                {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-sm btn-primary">
                        <i class="fas fa-edit me-1"></i> Edit/Respond
                    </a>
                }
                <a asp-action="Index" class="btn btn-sm btn-secondary ms-2">
                    <i class="fas fa-arrow-left me-1"></i> Back to List
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between">
                        <h6 class="mb-0">
                            <span class="badge @GetBadgeClassForType(Model.Type) me-2">@Model.Type</span>
                            @Model.Title
                        </h6>
                        <div>
                            <span class="badge @GetBadgeClassForStatus(Model.Status)">@Model.Status</span>
                            <span class="badge @GetBadgeClassForPriority(Model.Priority) ms-1">
                                Priority: @GetPriorityText(Model.Priority)
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <h6 class="fw-bold">Description</h6>
                            <p class="mb-0" style="white-space: pre-wrap;">@Model.Description</p>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.AttachmentUrl))
                        {
                            <div class="mb-4">
                                <h6 class="fw-bold">Attachment</h6>
                                <div>
                                    @if (Model.AttachmentUrl.EndsWith(".jpg") || Model.AttachmentUrl.EndsWith(".jpeg") || 
                                        Model.AttachmentUrl.EndsWith(".png") || Model.AttachmentUrl.EndsWith(".gif"))
                                    {
                                        <img src="@Model.AttachmentUrl" class="img-fluid mb-2" style="max-height: 300px;" />
                                    }
                                    <div>
                                        <a href="@Model.AttachmentUrl" class="btn btn-sm btn-outline-primary" target="_blank">
                                            <i class="fas fa-download me-1"></i> Download Attachment
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(Model.Response))
                        {
                            <div class="mt-4 pt-4 border-top">
                                <h6 class="fw-bold text-success">
                                    <i class="fas fa-reply me-1"></i> Response
                                </h6>
                                <p class="mb-1 text-muted">
                                    By @(Model.RespondedBy?.UserName ?? "Unknown") on @Model.RespondedAt?.ToString("MMM dd, yyyy hh:mm tt")
                                </p>
                                <p class="mb-0" style="white-space: pre-wrap;">@Model.Response</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0">Information</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="small text-muted">Submitted By</div>
                            <div>@(Model.SubmittedBy?.UserName ?? "Unknown")</div>
                        </div>
                        <div class="mb-3">
                            <div class="small text-muted">Submitted On</div>
                            <div>@Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</div>
                        </div>
                        @if (Model.UpdatedAt.HasValue)
                        {
                            <div class="mb-3">
                                <div class="small text-muted">Last Updated</div>
                                <div>@Model.UpdatedAt.Value.ToString("MMM dd, yyyy hh:mm tt")</div>
                            </div>
                        }
                        <div class="mb-3">
                            <div class="small text-muted">Visibility</div>
                            <div>
                                @if (Model.IsPublic)
                                {
                                    <span class="text-success"><i class="fas fa-eye me-1"></i> Public</span>
                                }
                                else
                                {
                                    <span class="text-secondary"><i class="fas fa-eye-slash me-1"></i> Private</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetBadgeClassForType(string type)
    {
        return type switch
        {
            "Complaint" => "bg-danger",
            "Feedback" => "bg-primary",
            "Suggestion" => "bg-info",
            "Appreciation" => "bg-success",
            _ => "bg-secondary"
        };
    }

    string GetBadgeClassForStatus(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "InProgress" => "bg-warning text-dark",
            "Resolved" => "bg-success",
            "Closed" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    string GetBadgeClassForPriority(int priority)
    {
        return priority switch
        {
            1 => "bg-info",
            2 => "bg-warning text-dark",
            3 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetPriorityText(int priority)
    {
        return priority switch
        {
            1 => "Low",
            2 => "Medium",
            3 => "High",
            _ => "Unknown"
        };
    }
} 