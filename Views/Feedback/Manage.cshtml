@model IEnumerable<HomeownersAssociation.Models.Feedback>

@{
    ViewData["Title"] = "Manage Feedback";
}

<style>
    .btn-group .btn {
        padding: 0.25rem 0.5rem;
        display: inline-block;
        text-align: center;
        min-width: 2rem;
        border-radius: 0.25rem !important;
        margin: 0 2px;
    }
    
    .btn-info {
        color: #fff;
        background-color: #0dcaf0;
        border-color: #0dcaf0;
    }
    
    .btn-primary {
        color: #fff;
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .btn-danger {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
    }
    
    .btn i {
        display: inline-block;
    }

    @@media (max-width: 768px) {
        .btn-group {
            display: flex;
            justify-content: center;
        }
    }
</style>

<div class="container-fluid pt-4 px-4">
    <div class="bg-light rounded p-4">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h5 class="mb-0">
                Manage Feedback & Complaints 
                @if (Model.Count(f => f.Status == "New") > 0)
                {
                    <span class="badge bg-danger ms-2">@Model.Count(f => f.Status == "New") New</span>
                }
            </h5>
            <div>
                <a asp-action="Public" class="btn btn-sm btn-secondary me-2">
                    <i class="fas fa-eye"></i> View Public Feedback
                </a>
                <a asp-action="Create" class="btn btn-sm btn-primary">
                    <i class="fas fa-plus"></i> Add Feedback
                </a>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="statusFilter" class="form-label">Filter by Status</label>
                    <select id="statusFilter" class="form-select">
                        <option value="">All Statuses</option>
                        <option value="New">New</option>
                        <option value="InProgress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="typeFilter" class="form-label">Filter by Type</label>
                    <select id="typeFilter" class="form-select">
                        <option value="">All Types</option>
                        <option value="Complaint">Complaint</option>
                        <option value="Feedback">Feedback</option>
                        <option value="Suggestion">Suggestion</option>
                        <option value="Appreciation">Appreciation</option>
                    </select>
                </div>
            </div>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fa fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fa fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="table-responsive">
            <table class="table table-hover table-striped" id="feedbackTable">
                <thead class="table-light">
                    <tr>
                        <th>@Html.DisplayNameFor(model => model.Title)</th>
                        <th>@Html.DisplayNameFor(model => model.Type)</th>
                        <th>@Html.DisplayNameFor(model => model.Status)</th>
                        <th>@Html.DisplayNameFor(model => model.Priority)</th>
                        <th>Submitted By</th>
                        <th>@Html.DisplayNameFor(model => model.CreatedAt)</th>
                        <th>Response</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Title)</td>
                            <td>
                                <span class="badge @GetBadgeClassForType(item.Type)">
                                    @Html.DisplayFor(modelItem => item.Type)
                                </span>
                            </td>
                            <td>
                                <span class="badge @GetBadgeClassForStatus(item.Status)">
                                    @Html.DisplayFor(modelItem => item.Status)
                                </span>
                            </td>
                            <td>
                                <span class="badge @GetBadgeClassForPriority(item.Priority)">
                                    @GetPriorityText(item.Priority)
                                </span>
                            </td>
                            <td>@(item.SubmittedBy?.UserName ?? "Unknown")</td>
                            <td>@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.Response))
                                {
                                    <span class="text-success">
                                        <i class="fas fa-check-circle"></i> 
                                        By @(item.RespondedBy?.UserName ?? "Unknown")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-warning">
                                        <i class="fas fa-clock"></i> Awaiting
                                    </span>
                                }
                            </td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info mx-1" 
                                       data-bs-toggle="tooltip" data-bs-placement="top" title="View Details">
                                        <i class="fa fa-eye"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-primary mx-1"
                                       data-bs-toggle="tooltip" data-bs-placement="top" title="Edit/Respond">
                                        <i class="fa fa-edit"></i>
                                    </a>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <button type="button" class="btn btn-sm btn-danger mx-1" 
                                              onclick="confirmDelete(@item.Id)"
                                              data-bs-toggle="tooltip" data-bs-placement="top" 
                                              title="Delete">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Hidden form for delete action -->
<form id="deleteForm" asp-action="Delete" method="post" style="display: none;">
    <input type="hidden" id="feedbackIdToDelete" name="id" value="" />
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            $('#feedbackTable').DataTable({
                order: [[5, 'desc']], // Sort by date (column 5) descending
                columnDefs: [
                    { orderable: false, targets: [7] } // Disable sorting on Actions column
                ]
            });
            
            // Initialize tooltips
            $('[data-bs-toggle="tooltip"]').tooltip();
            
            // Status filter
            $('#statusFilter').on('change', function() {
                var status = $(this).val();
                $('#feedbackTable').DataTable().column(2).search(status).draw();
            });
            
            // Type filter
            $('#typeFilter').on('change', function() {
                var type = $(this).val();
                $('#feedbackTable').DataTable().column(1).search(type).draw();
            });
        });

        function confirmDelete(id) {
            if (confirm('Are you sure you want to delete this feedback?')) {
                document.getElementById('feedbackIdToDelete').value = id;
                document.getElementById('deleteForm').submit();
            }
        }
    </script>
}

@functions {
    string GetBadgeClassForType(string type)
    {
        return type switch
        {
            "Complaint" => "bg-danger",
            "Feedback" => "bg-primary",
            "Suggestion" => "bg-info",
            "Appreciation" => "bg-success",
            _ => "bg-secondary"
        };
    }

    string GetBadgeClassForStatus(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "InProgress" => "bg-warning text-dark",
            "Resolved" => "bg-success",
            "Closed" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    string GetBadgeClassForPriority(int priority)
    {
        return priority switch
        {
            1 => "bg-info",
            2 => "bg-warning text-dark",
            3 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    string GetPriorityText(int priority)
    {
        return priority switch
        {
            1 => "Low",
            2 => "Medium",
            3 => "High",
            _ => "Unknown"
        };
    }
} 